import{_ as e,c as l,o as i,ag as r}from"./chunks/framework.DPDPlp3K.js";const b=JSON.parse('{"title":"小程序构建工具: esbuild+sucrase+chokidar","description":"","frontmatter":{},"headers":[],"relativePath":"document/tools/mp-build.md","filePath":"document/tools/mp-build.md","lastUpdated":1743355575000}'),s={name:"document/tools/mp-build.md"};function o(t,a,u,d,c,h){return i(),l("div",null,a[0]||(a[0]=[r('<h1 id="小程序构建工具-esbuild-sucrase-chokidar" tabindex="-1">小程序构建工具: esbuild+sucrase+chokidar <a class="header-anchor" href="#小程序构建工具-esbuild-sucrase-chokidar" aria-label="Permalink to &quot;小程序构建工具: esbuild+sucrase+chokidar&quot;">​</a></h1><h2 id="基础概念的区分" tabindex="-1">基础概念的区分 <a class="header-anchor" href="#基础概念的区分" aria-label="Permalink to &quot;基础概念的区分&quot;">​</a></h2><ul><li>Parser: babel/esbuild/ts/swc/TS/uglify.js</li><li>Transforme: babel/esbuild/swc/sucrase/TS</li><li>Bundlers: webpack/rollup/esbuild/parcel</li></ul><h2 id="解决什么问题" tabindex="-1">解决什么问题 <a class="header-anchor" href="#解决什么问题" aria-label="Permalink to &quot;解决什么问题&quot;">​</a></h2><ul><li>bundler将monorepo打包为了几个大的chunk，无法做hmr</li><li>多数rollup/webpack/vite对于monorepo无法有效的做单文件的hmr，只能统一全局rebuild</li></ul><h2 id="脚手架构建能力" tabindex="-1">脚手架构建能力 <a class="header-anchor" href="#脚手架构建能力" aria-label="Permalink to &quot;脚手架构建能力&quot;">​</a></h2><ul><li>使用esbuil转ts esm为js esm</li><li>使用sucrase转esm为cjs</li><li>最后使用chokidar做hmr热更新</li></ul><h3 id="esbuild" tabindex="-1">esbuild <a class="header-anchor" href="#esbuild" aria-label="Permalink to &quot;esbuild&quot;">​</a></h3><ul><li>基于go编写，多线程bundle效率相比js的工具提升一个数量级，</li><li>避免了js的运行时开销，类似用fs做文件io，用js解析ast，而esbuild直接将其编译为机器码然后转为ast</li><li>高效的内存管理和垃圾回收</li><li>避免了依赖node环境的api，直接调用底层系统的api如文件的io，使得这些操作更快</li></ul><blockquote><p>但是不提供hmr能力，且拆chunk能力极弱</p></blockquote><h3 id="sucrase" tabindex="-1">sucrase <a class="header-anchor" href="#sucrase" aria-label="Permalink to &quot;sucrase&quot;">​</a></h3><p>作为做快的单文件转换工具，sucrase与传统的以ast为基础转义的工具不同，他以token即即词法单元为基础进行转译，避免了转ast的开销，极大的提升了效率</p><blockquote><p>由于sucrase的版本老旧，对于许多ts语法都无法转译，所以会使用esbuild做前置转换</p></blockquote><h3 id="chokidar" tabindex="-1">chokidar <a class="header-anchor" href="#chokidar" aria-label="Permalink to &quot;chokidar&quot;">​</a></h3><p>跨平台兼容/高性能可靠/以及丰富的社区支持</p><p>chokidar 的文件监听能力依赖于操作系统的文件系统事件通知机制（如果可用），或者通过轮询作为备选方案</p><h4 id="监听文件的原理" tabindex="-1">监听文件的原理 <a class="header-anchor" href="#监听文件的原理" aria-label="Permalink to &quot;监听文件的原理&quot;">​</a></h4><h2 id="为什么没有使用其他脚手架" tabindex="-1">为什么没有使用其他脚手架 <a class="header-anchor" href="#为什么没有使用其他脚手架" aria-label="Permalink to &quot;为什么没有使用其他脚手架&quot;">​</a></h2><p>目标是提升开发效率，即提升构建速度，且解决hmr问题</p><ul><li>rollup/webpack都是基于js编写，受限于原生js的单线程问题，构建效率较慢</li><li>webpack构建过程中大量的js解析和插件执行</li></ul>',20)]))}const p=e(s,[["render",o]]);export{b as __pageData,p as default};
