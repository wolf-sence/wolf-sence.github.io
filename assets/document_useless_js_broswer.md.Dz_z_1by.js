import{_ as e,c as l,o as i,ag as t}from"./chunks/framework.DPDPlp3K.js";const p=JSON.parse('{"title":"浏览器从输入url到页面展示","description":"","frontmatter":{},"headers":[],"relativePath":"document/useless/js/broswer.md","filePath":"document/useless/js/broswer.md","lastUpdated":1744303628000}'),r={name:"document/useless/js/broswer.md"};function o(s,a,d,n,h,c){return i(),l("div",null,a[0]||(a[0]=[t('<h1 id="浏览器从输入url到页面展示" tabindex="-1">浏览器从输入url到页面展示 <a class="header-anchor" href="#浏览器从输入url到页面展示" aria-label="Permalink to &quot;浏览器从输入url到页面展示&quot;">​</a></h1><h2 id="开辟新进程" tabindex="-1">开辟新进程 <a class="header-anchor" href="#开辟新进程" aria-label="Permalink to &quot;开辟新进程&quot;">​</a></h2><p>浏览器每打开一个新的tab就是一个新的进程，每个进程内可能含有多个线程</p><p>主要进程有</p><ul><li>浏览器主进程(负责协调/主控)、</li><li>插件进程、</li><li>浏览器渲染进程(即tab页) 对于浏览器tab页进程来说，其内部存在多个线程</li><li>gui渲染线程： 解析HTML，CSS，构建DOM树和RenderObject树，布局和绘制等。<code>GUI渲染线程与JS引擎线程是互斥的。</code></li><li>js引擎线程：负责js脚本运行，一个tab只有一个js引擎</li><li>事件触发线程：控制鼠标/键盘等事件，推入事件队列等js执行</li><li>定时器线程</li><li>http请求线程</li></ul><h2 id="输入url-url解析" tabindex="-1">输入url-url解析 <a class="header-anchor" href="#输入url-url解析" aria-label="Permalink to &quot;输入url-url解析&quot;">​</a></h2><ul><li>解析url是否符合规则：协议、域名、端口号等</li><li>符合规则后将url转给网络进程，不符合规则的话会使用搜索引擎搜索字符串</li></ul><h2 id="dns域名解析" tabindex="-1">dns域名解析 <a class="header-anchor" href="#dns域名解析" aria-label="Permalink to &quot;dns域名解析&quot;">​</a></h2><ul><li>首先会在本地hosts中寻找域名对应ip，</li><li>找不到的话就去dns服务器查找对应的ip，通常会先查找本地dns服务器（移动/电信），</li><li>然后去根dns服务器，然后是域服务器，他会返回告诉本地dns服务器 域名的<code>解析</code>服务器的地址</li><li>本地dns服务器请求对应服务器地址，该服务器会返回域名与ip关系，本地dns服务器会将ip返回给用户，同时自己缓存下这一host关系 <img src="https://pic3.zhimg.com/v2-367da995706289a83af5c0372d55f43e_1440w.jpg" alt="流程图"></li></ul><h2 id="建立tcp连接请求服务" tabindex="-1">建立tcp连接请求服务 <a class="header-anchor" href="#建立tcp连接请求服务" aria-label="Permalink to &quot;建立tcp连接请求服务&quot;">​</a></h2><p>拿到ip后三次握手建立http连接</p><blockquote><p>三次握手抽象版： 客户端：hello，你是server么？ 服务端：hello，我是server，你是client么 客户端：yes，我是client</p></blockquote><h3 id="为什么是三次握手" tabindex="-1">为什么是三次握手 <a class="header-anchor" href="#为什么是三次握手" aria-label="Permalink to &quot;为什么是三次握手&quot;">​</a></h3><p>为了确认双方的 接收能力 和 发送能力 都正常。 如果是用两次握手，则会出现下面这种情况：</p><ul><li>如果只有两次握手，服务端发出确认请求就建立连接，这一步可能发生丢失，则会导致服务端一直在等待的状态</li><li>客户端有可能因为第一次握手丢失而重新发出握手请求，当第二次的连接建立并完成断开时，第一次的握手可能因为网络延迟才到服务端，这时候服务端可能会认为又要重新建立连接，这时服务端发出确认并建立连接，就有可能会浪费资源</li></ul><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d7d55705ea9421a95a4653789138d96~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2880&amp;h=1330&amp;s=1007695&amp;e=png&amp;b=fefefe" alt="http-connect"></p><h2 id="请求缓存" tabindex="-1">请求缓存 <a class="header-anchor" href="#请求缓存" aria-label="Permalink to &quot;请求缓存&quot;">​</a></h2><h3 id="强缓存" tabindex="-1">强缓存： <a class="header-anchor" href="#强缓存" aria-label="Permalink to &quot;强缓存：&quot;">​</a></h3><p>使用强缓存策略时，如果缓存资源在过期时间内，是的话直接从本地缓存中读取资源，不与服务器进行通信。常见的缓存控制字段有Expires和Cache-Control。注意，如果同时启用了Cache-Control与Expires，Cache-Control优先级高。</p><h3 id="协商缓存" tabindex="-1">协商缓存： <a class="header-anchor" href="#协商缓存" aria-label="Permalink to &quot;协商缓存：&quot;">​</a></h3><p>如果强缓存失效后，客户端将向服务器发出请求，进行协商缓存。浏览器携带上一次请求返回的响应头中的 缓存标识 向服务器发起请求（如ETag、Last-Modified等），由服务器判断资源是否更新。如果资源没有更新，则返回状态码 304 Not Modified，告诉浏览器可以使用本地缓存；否则返回新的资源内容。强缓存优先级高于协商缓存，但是协商缓存可以更加灵活地控制缓存的有效性。</p><h2 id="渲染页面" tabindex="-1">渲染页面 <a class="header-anchor" href="#渲染页面" aria-label="Permalink to &quot;渲染页面&quot;">​</a></h2><h3 id="解析html-解析-html-并构建-dom-树。" tabindex="-1">解析HTML: 解析 HTML 并构建 DOM 树。 <a class="header-anchor" href="#解析html-解析-html-并构建-dom-树。" aria-label="Permalink to &quot;解析HTML: 解析 HTML 并构建 DOM 树。&quot;">​</a></h3><p>浏览器从磁盘或网络读取HTML文件的原始字节，并根据文件的指定编码（例如UTF-8）将它们转换成字符串。</p><ul><li>开启解析前，会开启一个预解析的线程，预先下载html中的外部css和外部js</li><li>如果主线程解析到link位置，此时外部的CSS文件还没有下载解析好，主线程不会等待，继续解析后续的HTML。 <ul><li>这是因为下载和解析CSS的工作是在预解析线程中进行的。这就是CSS不会阻塞 HTML 解析的根本原因</li></ul></li><li>如果主线程解析到script位置，会停止解析 HTML，转而等待 JS 文件下载好，并将全局代码解析执行完成后，才能继续解析 HTML。 <ul><li>这是因为 JS 代码的执行过程可能会修改当前的 DOM 树，所以 DOM 树的生成必须暂停。这就是 JS 会阻塞 HTML 解析的根本原因。</li></ul></li></ul><h3 id="解析css-解析-css-构建-cssom-树-样式树-。" tabindex="-1">解析CSS: 解析 CSS 构建 CSSOM 树（样式树）。 <a class="header-anchor" href="#解析css-解析-css-构建-cssom-树-样式树-。" aria-label="Permalink to &quot;解析CSS: 解析 CSS 构建 CSSOM 树（样式树）。&quot;">​</a></h3><p>渲染引擎将 CSS 样式表转化为浏览器可以理解的 styleSheets，转换样式表中的属性使其标准化</p><h3 id="补充点-js解析" tabindex="-1">补充点: js解析 <a class="header-anchor" href="#补充点-js解析" aria-label="Permalink to &quot;补充点: js解析&quot;">​</a></h3><ul><li>浏览器创建Document对象并解析HTML，将解析到的元素和文本节点添加到文档中，此时document.readystate为loading</li><li>HTML解析器遇到普通的script时，将他们添加到文档中，然后执行行内或外部脚本。这些脚本会同步执行，并且在脚本下载和执行时解析器会暂停。这样就可以用document.write()把文本插入到输入流中。同步脚本经常简单定义函数和注册事件处理程序，他们可以遍历和操作script和他们之前的文档内容</li><li>当解析器遇到设置了async属性的script时，开始下载脚本并继续解析文档。脚本会在它下载完成后尽快执行，但是解析器不会停下来等它下载。异步脚本禁止使用document.write()，它们可以访问自己script和之前的文档元素</li><li>当文档完成解析，document.readState变成interactive</li><li>所有defer脚本会按照在文档出现的顺序执行，延迟脚本能访问完整文档树，禁止使用document.write()</li><li>浏览器在Document对象上触发DOMContentLoaded事件</li><li>此时文档完全解析完成，浏览器可能还在等待如图片等内容加载，等这些内容完成载入并且所有异步脚本完成载入和执行，document.readState变为complete，window触发load事件</li></ul><h3 id="合成渲染树-将-dom-与-cssom-合并成一个-渲染树-render-tree" tabindex="-1">合成渲染树：将 DOM 与 CSSOM 合并成一个 渲染树（Render Tree） <a class="header-anchor" href="#合成渲染树-将-dom-与-cssom-合并成一个-渲染树-render-tree" aria-label="Permalink to &quot;合成渲染树：将 DOM 与 CSSOM 合并成一个 渲染树（Render Tree）&quot;">​</a></h3><p>等待dom树和css树都完成之后，根据cssom计算每个元素最终的样式信息，然后经过计算和合并，浏览器合成render树，渲染树只会包括需要显示的节点和这些节点的样式信息，如display: none的元素不会被构建入渲染树</p><p>这一过程中很多预设值都会变成绝对值em =&gt; px; bold =&gt; 700; red =&gt; rgb(255,0,0)，</p><h3 id="布局计算-根据渲染树的结构-计算每个节点在屏幕上的大小、位置等属性-生成布局信息-layout-。这个过程会发生回流和重绘。" tabindex="-1">布局计算：根据渲染树的结构，计算每个节点在屏幕上的大小、位置等属性，生成布局信息（Layout）。这个过程会发生回流和重绘。 <a class="header-anchor" href="#布局计算-根据渲染树的结构-计算每个节点在屏幕上的大小、位置等属性-生成布局信息-layout-。这个过程会发生回流和重绘。" aria-label="Permalink to &quot;布局计算：根据渲染树的结构，计算每个节点在屏幕上的大小、位置等属性，生成布局信息（Layout）。这个过程会发生回流和重绘。&quot;">​</a></h3><p>根据渲染树中的信息为每个节点计算最终样式：位置/大小等，并处理重叠和层叠的绘制顺序，</p><h3 id="绘制页面-将生成的布局信息交给浏览器的绘图引擎" tabindex="-1">绘制页面：将生成的布局信息交给浏览器的绘图引擎 <a class="header-anchor" href="#绘制页面-将生成的布局信息交给浏览器的绘图引擎" aria-label="Permalink to &quot;绘制页面：将生成的布局信息交给浏览器的绘图引擎&quot;">​</a></h3><p>基于多种因素(动画/3d变换)将页面分为多个图层，允许浏览器只更新需要变化的部份，然后使用gpu加速对每个图层进行绘制，最后将所有图层合并成最终的页面图像，合成过程中可能会使用硬件加速</p><h3 id="浏览器回流和重绘-如果页面发生改变-浏览器需要重新计算布局和绘制-这可能会导致性能问题。因此我们应尽量避免频繁的-dom-操作和调整元素样式-以减少不必要的回流和重绘" tabindex="-1">浏览器回流和重绘：如果页面发生改变，浏览器需要重新计算布局和绘制，这可能会导致性能问题。因此我们应尽量避免频繁的 DOM 操作和调整元素样式，以减少不必要的回流和重绘 <a class="header-anchor" href="#浏览器回流和重绘-如果页面发生改变-浏览器需要重新计算布局和绘制-这可能会导致性能问题。因此我们应尽量避免频繁的-dom-操作和调整元素样式-以减少不必要的回流和重绘" aria-label="Permalink to &quot;浏览器回流和重绘：如果页面发生改变，浏览器需要重新计算布局和绘制，这可能会导致性能问题。因此我们应尽量避免频繁的 DOM 操作和调整元素样式，以减少不必要的回流和重绘&quot;">​</a></h3><p>重绘：仅样式改变，但不改变大小/位置， - 第一次的渲染称为绘制，后面的渲染则称为重绘 回流：大小/位置发生变化，以及读取一些敏感属性：clientWidth/getComputedStyle时为了保证获取结果时即时准确的，也会触发布局的重新渲染 - 回流一定引发重绘</p><h2 id="四次挥手断开连接" tabindex="-1">四次挥手断开连接 <a class="header-anchor" href="#四次挥手断开连接" aria-label="Permalink to &quot;四次挥手断开连接&quot;">​</a></h2><p>抽象版</p><ul><li>客户端：我已经关闭了向你那边的主动通道了，这是我最后一次给你发消息了，之后只能被动接收你的信息了</li><li>服务端：收到你通道关闭的信息</li><li>服务端：那我也告诉你，我这边向你的主动通道也关闭了</li><li>客户端：最后收到你关闭的信息，OK结束</li></ul><h1 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h1><h2 id="绘制篇" tabindex="-1">绘制篇 <a class="header-anchor" href="#绘制篇" aria-label="Permalink to &quot;绘制篇&quot;">​</a></h2><ul><li>避免频繁读取引发重绘/回流的属性(clientWidth/scrollHeight)，可以使用变量存储</li><li>动画效果应用到 position 属性为 absolute、fixed 元素上，脱离文档流，单独渲染区域</li><li>css动画会利用gpu加速，可以使用transform代替使用js直接改变元素的位置，</li><li>对dom操作可以先在Document Fragment中完成，再一次性插入dom中，这也是vue虚拟dom的做法</li><li>特殊属性会形成新的合成层，会以内存为代价利用gpu提高渲染性能 <ul><li>常见的属性有：3dtransform、video/canvas/iframe标签、fixed布局、transition设置了opacity/transform的属性</li></ul></li><li>善用script标签的async、defer属性</li></ul><h2 id="网络篇" tabindex="-1">网络篇 <a class="header-anchor" href="#网络篇" aria-label="Permalink to &quot;网络篇&quot;">​</a></h2><ul><li>使用dns-prefetch提前预解析dns <ul><li><link rel="dns-prefetch" href="https://fonts.googleapis.com/"></li></ul></li><li>使用cdn负载均衡</li><li>分服务器部署，区分web服务器、资源服务区、数据服务器等</li><li>减少tcp三次握手和四次挥手，http1.1开启Connection: keep-alive复用同一个tcp连接</li><li>更新不频繁的资源可以使用强缓存和协商缓存</li><li>不常变动的接口数据可以本地缓存</li><li>静态资源gzip压缩，小文件合并、小图片转base64(会导致体积增大1/3)以减少http请求</li></ul>',46)]))}const m=e(r,[["render",o]]);export{p as __pageData,m as default};
